<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kite.member">
	<delete id="delete" parameterType="Member">
		delete
		from
		members
		where
		email=#{email}
	</delete>
	<insert id="insert" parameterType="Member">
		insert into
		members(email,pw,lastname,firstname,birthday,gender,area,job,company,image)
		values
		(#{email}, #{pw}, #{lastname}, #{firstname}, #{birthday},
		#{gender}, #{area},
		#{job}, #{company}, #{image})
	</insert>
	<select id="selectOne" parameterType="Member"
		resultType="Member">
		select *
		from members
		where email=#{email}
	</select>
	<select id="selectList" resultType="Member">
		select *
		from members
	</select>
	<select id="login" parameterType="Member" resultType="Member">
		select *
		from members
		where email=#{email} and pw=#{pw}
	</select>
	<update id="update" parameterType="Member">
		update
		members
		set
		email=#{email}, pw=#{pw}, lastname=#{lastname},
		firstname=#{firstname}, birthday=#{birthday}, gender=#{gender},
		area=#{area}, job=#{job}, company=#{company}, image=#{image}
		where
		memberid=#{memberid}
	</update>
	<update id="scrapUpdate" parameterType="hashmap">
		update member_article
		set
		articleid=#{articles}
		where memberid = #{memberid}
	</update>
	<insert id="scrapInsert" parameterType="hashmap">
		insert into
		member_article(memberid, articleid)
		values (#{memberid},#{articles})
	</insert>
	<select id="getscrap" parameterType="Member" resultType="String">
		select
		articleid
		from member_article
		where memberid=#{memberid}
	</select>
	<select id="scrapcounter" parameterType="Member"
		resultType="int">
		select count(memberid)
		from member_article
		where
		memberid=#{memberid}
	</select>
	<select id="selectMyMemberList" parameterType="int"
		resultType="Member">
		select * from members where memberid not in(#{memberid});
	</select>
	<select id="selectFriendList" parameterType="int"
		resultType="Member">
		select * from members where memberid in (select friendid
		from friend where memberid = #{memberid});
	</select>
	<select id="selectRequestList" parameterType="int"
		resultType="Member">
		select * from members where memberid in (select responseid
		from friendwait where requestid = #{memberid});
	</select>
	<select id="selectResponseList" parameterType="int"
		resultType="Member">
		select * from members where memberid in (select requestid
		from friendwait where responseid = #{memberid});
	</select>
	<select id="selectNoRelationList" parameterType="int"
		resultType="Member">
		select * from members where memberid not in (select
		#{memberid}
		union all select friendid as id from friend where memberid
		= #{memberid}
		union all select responseid as id from friendwait where
		requestid = #{memberid}
		union all select requestid as id from
		friendwait where responseid = #{memberid}
		);
	</select>
	<insert id="insertFriendWait" parameterType="hashmap">
		insert into friendwait(requestid, responseid) values(#{requestid}, #{responseid});
	</insert>
	<delete id="deleteFriendWait" parameterType="hashmap">
		delete from friendwait where
		requestid = #{requestid} and responseid = #{responseid};
	</delete>
	<insert id="insertFriend" parameterType="hashmap">
		insert into friend (memberid, friendid) values(#{memberid},#{friendid});
		insert into friend (memberid, friendid) values(#{friendid},#{memberid});
	</insert>
	<delete id="deleteFriend" parameterType="hashmap">
		delete from friend where
		memberid = #{memberid} and friendid = #{friendid};
		delete from friend where
		memberid = #{friendid} and friendid = #{memberid};
	</delete>
















</mapper>